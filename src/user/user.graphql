type User {
  id: ID!
  userName: String!
  email: Email!
  dateJoined: Date
  lastEdited: Date
  following: [User]
  followedBy: [User]
}

input UpdateUserInput {
  id: ID!
  userName: String
  email: String
}

type Follower {
  following: User
  followedBy: User
  relationship: Relationship
}

type StatusMessage {
  message: String
  code: String
}

enum Relationship {
  Favorite
  Close
  Following
  Blocked
}

type FollowReturn {
  following: String
  relationship: Relationship
  status: StatusMessage
}

type Query {
  allUsers: [User]!
  userById(id: ID!): User
}

type Mutation {
  followUser(followId: String!, relationship: Relationship): FollowReturn
  unFollowUser(userId: String): StatusMessage
}
